package local.domain1;

import gnu.getopt.Getopt;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;

public class Charts {
    public static void main(String[] args) {
        new Charts(args);
    }
    public Charts(){}
    public Charts(String[] args){
        Getopt g = new Getopt("Chart", args, "t:r:");
        int c,height=0;
        String arg = "",action="",runId="",mainTitleText="",title1="",title2="",runRep="";
        boolean legend = true;
        Db db = new Db();
        while ((c = g.getopt()) != -1){
            switch(c){
                case 't':
                    arg = g.getOptarg();
                    if (arg.equals("1")) {
                        mainTitleText = "Successful extensions per domain - ";
                        title1 = "Extensions";
                        title2 = "Successful downloads";
                        action = "extPerDomPerRun_1";
                    }else if (arg.equals("2")){
                        mainTitleText = "Successful domains per extension - ";
                        title1 = "Domains";
                        title2 = "Successful downloads";
                        action = "domPerExtPerRun_1";
                    }else if (arg.equals("3")){
                        mainTitleText = "Run duration";
                        title1 = "Runs";
                        title2 = "Duration in seconds";
                        action = "RunDuration_3";
                        //int test =db.getNumberFromDB("numberOfAllIDs",0);
                        //System.out.println("number: "+test);
                        //height = test*80;
                        height = (db.getNumberFromDB("runID",0)-1)*80;
                    }else if (arg.equals("4")){
                        mainTitleText = "Runs per Aggregator";
                        title1 = "Aggregators";
                        title2 = "Number of runs";
                        action = "runsPerRep_4";
                        height = db.getNumberFromDB("numberOfRepsPerName",0)*80;
                        //legend = false;
                    }
                    break;
                case 'r':
                    runId = g.getOptarg();
                    runRep = pullChartData("namePerId_2",new String[]{runId}).getColumnKey(0).toString().toUpperCase();
                    break;
                default:
                    System.out.println("Program syntax:\nCharts -t <1|2|3|4> -r <runId>\n");
                    System.out.println("1 = Successful extensions per domain per run.");
                    System.out.println("2 = Successful domains per extension per run.");
                    System.out.println("3 = Run duration.");
                    System.out.println("4 = Number of runs per aggregator.");
                    System.out.println("runId = Run ID number.");
                    System.out.println("Both -t and -r arguments are mandatory for types 1 and 2. -r arguments used with option 3 or 4 will be ignored.");
                    System.out.println("Example: Charts -t 1 -r 1\n");
                    break;
            }
        }
        createChart(
                mainTitleText+runRep, // mainTitle
                title1,
                title2,
                pullChartData(action,new String[]{runId}), // dataset
                System.currentTimeMillis(), // time (for the file name)
                runId,
                height,
                legend,
                "bar"
        );
    }
    public void createChart(
            String mainTitle,
            String title1,
            String title2,
            DefaultCategoryDataset dataset,
            long timeId,
            String runId,
            int height,
            boolean legend,
            String chartType
    ){
        try {
            if (!runId.equals("")){
                runId = "_run"+runId;
            }

            JFreeChart chart = ChartFactory.createBarChart(
                    mainTitle,  // main title
                    title1, // horizontal title (Xaxis in a vertical orientation)
                    title2, // vertical title (Yaxis in a vertical orientation)
                    dataset,
                    PlotOrientation.HORIZONTAL,
                    //PlotOrientation.VERTICAL,
                    legend,
                    true, // tooltips
                    false // urls
            );

            //JFreeChart chart = ChartFactory.createTimeSeriesChart(
            //JFreeChart chart = ChartFactory.createScatterPlot()

            CategoryPlot plot = chart.getCategoryPlot();
            CategoryAxis axis = plot.getDomainAxis();

            //axis.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
            axis.setCategoryMargin(0.1);

            axis.setLowerMargin(0.005);
            axis.setUpperMargin(0.005);

            BarRenderer renderer = (BarRenderer) plot.getRenderer();
            renderer.setItemMargin(0); // 0.1 means 10%
            renderer.setMinimumBarLength(0.5);

            //XYPlot plot = chart.getXYPlot();
            //plot.setAxisOffset(new RectangleInsets(5.0, 0.0, 5.0, 5.0));

            //DateAxis axis = (DateAxis) plot.getDomainAxis();
            //axis.setDateFormatOverride(new SimpleDateFormat("HH-mm-ss"));

            //CategoryPlot plot = (CategoryPlot) chart.getPlot();
            //BarRenderer renderer = (BarRenderer) plot.getRenderer();
            //ChartPanel panel = new ChartPanel(chart);
            //panel.setMaximumDrawHeight(999999999);
            //panel.setMaximumSize(new Dimension(999999999,999999999));
            //chart = panel.getChart();

            int width = 1000;

            if (height == 0) {
                if (dataset.getColumnCount() >= dataset.getRowCount()) {
                    height = (dataset.getRowCount()+2) * 200;
                } else if (dataset.getRowCount() > dataset.getColumnCount()) {
                    height = (dataset.getColumnCount()+2) * 200;
                }
            }

            //height = (dataset.getRowCount()+2) * 200;
            //height = (dataset.getColumnCount()+2)*15;
            //width = 1000;
            //height = 2000;
            //width = height;
            //height = 999999;
            System.out.println("Height: "+height);
            String file = "files/png/"+mainTitle.toUpperCase()+runId+"_"+timeId+".png";
            ChartUtilities.saveChartAsPNG(
                    new File(file),
                    chart,
                    width,
                    height
            );
            System.out.println("Finished generating graph file named "+file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public DefaultCategoryDataset pullChartData(String action, String[] array){
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try{
            java.sql.Connection conn = new Db().getConn();
            if (action.endsWith("_1")) {
                int value = 0;
                String rs3query="",item1="",item2="",col1="",col2="";
                if (action.equals("extPerDomPerRun_1")) {
                    col1 = "domname";
                    col2 = "extname";

                } else if (action.equals("domPerExtPerRun_1")) {
                    col1 = "extname";
                    col2 = "domname";
                }
                ResultSet rs1 = conn.prepareStatement("select distinct "+col1+" from rep_download where runid = " + array[0]+" order by "+col1).executeQuery();
                ResultSet rs2 = conn.prepareStatement("select distinct "+col2+" from rep_download where runid = " + array[0]+" order by "+col2).executeQuery();
                ResultSet rs3 = null;
                while (rs1.next()) {
                    item1 = rs1.getString(1);
                    while (rs2.next()) {
                        item2 = rs2.getString(1);
                        rs3query = "select count(*) from rep_download where "+col1+" = \"" + item1 + "\" and "+col2+" = \"" + item2 + "\" and success = \"y\" and runId = " + array[0];
                        rs3 = conn.prepareStatement(rs3query).executeQuery();
                        rs3.next();
                        value = rs3.getInt(1);
                        //System.out.println("rs3query: " + rs3query);
                        //System.out.println("item1 = " + item1 + ", item2 = " + item2 + ", value = " + value);
                        dataset.addValue(
                                value,
                                item1,
                                item2
                        );
                    }
                    rs2.beforeFirst();
                }
                rs3.close();
                rs2.close();
                rs1.close();
            }else if (action.equals("namePerId_2")) {
                ResultSet rs = conn.prepareStatement("select repname from rep_run where id = "+array[0]).executeQuery();
                rs.next();
                dataset.addValue(1,"",rs.getString(1));
                rs.close();
            }else if (action.equals("RunDuration_3")) {
                ResultSet rs = conn.prepareStatement("select id, repname,floor((finishtime-starttime)/ 1000) from rep_run").executeQuery();
                while (rs.next()) {
                    dataset.addValue(rs.getInt(3),rs.getString(1),rs.getString(2));
                }
                rs.close();
            }else if (action.equals("runsPerRep_4")) {
                ResultSet rs = conn.prepareStatement("select distinct repname, count(*) as count from rep_run group by repname order by repname").executeQuery();
                int c = 0;
                while (rs.next()) {
                    dataset.addValue(rs.getInt(2),String.valueOf(c),rs.getString(1));
                    c++;
                }
                rs.close();
            }
            conn.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        return dataset;
    }
    private void test(){
        final XYSeries firefox = new XYSeries( "Firefox" );
        firefox.add( 1.0 , 1.0 );
        firefox.add( 2.0 , 4.0 );
        firefox.add( 3.0 , 3.0 );
        final XYSeries chrome = new XYSeries( "Chrome" );
        chrome.add( 1.0 , 4.0 );
        chrome.add( 2.0 , 5.0 );
        chrome.add( 3.0 , 6.0 );
        final XYSeries iexplorer = new XYSeries( "InternetExplorer" );
        iexplorer.add( 3.0 , 4.0 );
        iexplorer.add( 4.0 , 5.0 );
        iexplorer.add( 5.0 , 4.0 );
        final XYSeriesCollection dataset = new XYSeriesCollection( );
        dataset.addSeries( firefox );
        dataset.addSeries( chrome );
        dataset.addSeries( iexplorer );

        JFreeChart xylineChart = ChartFactory.createXYLineChart(
                "Browser usage statastics",
                "Category",
                "Score",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false);

        int width = 640; /* Width of the image */
        int height = 480; /* Height of the image */
        File XYChart = new File( "files/png/test.png" );
        try {
            ChartUtilities.saveChartAsPNG( XYChart, xylineChart, width, height);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
